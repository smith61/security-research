package poc.shared;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public abstract class EmbeddedObject implements Serializable {
	
	private static final long serialVersionUID = 2652954905349357592L;
	
	protected transient byte[] serialObject;
	
	public static EmbeddedObject createEmbeddedObject( byte[] serialObject ) {
		EmbeddedObject eo;
		if( serialObject.length <= 0xFF ) {
			eo = new SmallEmbeddedObject( );
		}
		else {
			eo = new LargeEmbeddedObject( );
		}
		eo.serialObject = serialObject;
		
		return eo;
	}
	
	public abstract Object getObject( );
	
	@SuppressWarnings( { "unused" } )
	private static class SmallEmbeddedObject extends EmbeddedObject {
		
		private static final long serialVersionUID = -4570288454399261723L;
		
		private byte headerBuf;
		private byte headerLength;
		
		private Object object;
		
		private void writeObject( ObjectOutputStream oos ) throws IOException {
			oos.write( this.serialObject );
		}
		
		@Override
		public Object getObject( ) {
			return this.object;
		}
		
	}

	@SuppressWarnings( { "unused" } )
	private static class LargeEmbeddedObject extends EmbeddedObject {

		private static final long serialVersionUID = -5084715276885271988L;
		
		private byte headerBuf;
		private int headerLength;
		
		private Object object;
		
		private void writeObject( ObjectOutputStream oos ) throws IOException {
			oos.write( this.serialObject );
		}
		
		@Override
		public Object getObject( ) {
			return this.object;
		}
		
	}
	
}
