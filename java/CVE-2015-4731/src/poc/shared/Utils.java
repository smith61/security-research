package poc.shared;

import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.AllPermission;
import java.security.CodeSigner;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Permissions;
import java.security.ProtectionDomain;

public class Utils {
	
	private static int depth = 0;
	
	public static void enter( String s ) {
		Utils.log( "Entering ( '%s' ):", s );
		Utils.depth++;
	}
	
	public static void exit( ) {
		Utils.depth--;
	}
	
	public static void log( String fmt, Object... args ) {
		StringBuilder builder = new StringBuilder( );
		for( int i = 0; i < depth; i++ ) {
			builder.append( "  " );
		}
		builder.append( "- " );
		
		builder.append( String.format(  fmt, args ) );
		
		System.err.println( builder );
	}
	
	public static ProtectionDomain createPrivilegedDomain( ) {
		try {
			PermissionCollection pc = new Permissions( );
			pc.add( new AllPermission( ) );
			
			CodeSource cs = new CodeSource( new URL( "file:////" ), new CodeSigner[ 0 ] );
			
			ProtectionDomain pd = new ProtectionDomain( cs, pc );
			
			return pd;
		}
		catch( MalformedURLException mue ) {
			throw new AssertionError( mue );
		}
	}
	
	public static byte[] readResource( String rsName ) {
		InputStream is = null;
		ByteArrayOutputStream byteOut = null;
		try {
			is = Utils.class.getResourceAsStream( rsName );
			byteOut = new ByteArrayOutputStream( );
			
			byte[] buf = new byte[ 4096 ];
			int read = 0;
			while( ( read = is.read( buf ) ) != -1 ) {
				byteOut.write( buf, 0, read );
			}
			
			return byteOut.toByteArray();
		}
		catch( IOException ioe ) {
			throw new AssertionError( ioe );
		}
		finally {
			Utils.safeClose( is );
			Utils.safeClose( byteOut );
		}
	}
	
	public static byte[] readClass( Class< ? > cl ) {
		String clName = cl.getName( );
		clName = clName.replaceAll( "\\.", "/" );
		clName = "/" + clName + ".class";
		
		return Utils.readResource( clName );
	}
	
	public static void safeClose( Closeable c ) {
		if( c == null ) {
			return;
		}
		try {
			c.close();
		}
		catch( IOException ioe ) { }
	}
	
}
